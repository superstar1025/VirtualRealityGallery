# -*- coding: utf-8 -*-
# Generated by Django 1.11.18 on 2019-01-12 15:31
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='username')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Hotspot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('x', models.FloatField(default=0)),
                ('y', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('image', models.ImageField(upload_to=b'')),
            ],
        ),
        migrations.CreateModel(
            name='ImageFloorPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('image', models.ImageField(upload_to=b'')),
                ('order', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='ImageGallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('image', models.ImageField(upload_to=b'')),
                ('order', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ModuleFloorPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ModuleGallery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=False)),
                ('first_hotspot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_first_hotspot', to='content.Hotspot')),
                ('second_hotspot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_second_hotspot', to='content.Hotspot')),
            ],
            options={
                'verbose_name': 'Gallery',
                'verbose_name_plural': 'Galleries',
            },
        ),
        migrations.CreateModel(
            name='ModuleVR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=False)),
                ('first', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vr_first', to='content.Image')),
                ('first_hotspot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vr_first_hotspot', to='content.Hotspot')),
                ('second', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vr_second', to='content.Image')),
                ('second_hotspot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vr_second_hotspot', to='content.Hotspot')),
            ],
            options={
                'verbose_name': 'VR',
                'verbose_name_plural': 'VR',
            },
        ),
        migrations.AddField(
            model_name='location',
            name='floorPlan',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='content.ModuleFloorPlan'),
        ),
        migrations.AddField(
            model_name='location',
            name='gallery',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='content.ModuleGallery'),
        ),
        migrations.AddField(
            model_name='location',
            name='user',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='location',
            name='vr',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='content.ModuleVR'),
        ),
        migrations.AddField(
            model_name='imagegallery',
            name='gallery',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.ModuleGallery'),
        ),
        migrations.AddField(
            model_name='imagefloorplan',
            name='floorPlan',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.ModuleFloorPlan'),
        ),
    ]
